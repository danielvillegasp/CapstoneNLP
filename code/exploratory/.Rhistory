dim(bigram.m) <- c(length(unique(bigrams$w0), length(unique(bigrams$w1))
)
()
)
,
bigram.m <- rep(0, length(unique(bigrams$w0)) *  length(unique(bigrams$w1)))
dim(bigram.m) <- c(length(unique(bigrams$w0), length(unique(bigrams$w1)))
))
bigram.m <- rep(0, length(unique(bigrams$w0)) *  length(unique(bigrams$w1)))
dim(bigram.m) <- c(length(unique(bigrams$w0)), length(unique(bigrams$w1)))
dim(bigram.m)
dimnames(bigram.m) <- list(unique(bigrams$w0), unique(bigrams$w1))
bigram.m
bigram.m[['abby']]
bigram.m['abby']
bigram.m[['abby', 'unlimit']]
bigram.m[['abby', 'unlimit']]<-1
bigram.m
colnames(bigrams)
bigram.m <- rep(0, length(unique(bigrams$w0)) *  length(unique(bigrams$w1)))
dim(bigram.m) <- c(length(unique(bigrams$w0)), length(unique(bigrams$w1)))
dimnames(bigram.m) <- list(unique(bigrams$w0), unique(bigrams$w1))
for(i in unique(bigrams$w0)){
for(j in unique(bigrams$w1)){
bigram.m[[i, j]] <- bigrams[bigrams$w0 == i & bigrams$w1 == j,4]
}
}
bigrams[bigrams$w0 == i & bigrams$w1 == j,4]
bigrams[bigrams$w0 == i & bigrams$w1 == j,3]
i
j
head(bigrams)
bigrams[bigrams$w0 == 'abby' & bigrams$w1 == 's',3]
bigrams[bigrams$w0 == 'abby' & bigrams$w1 == 's',4]
bigrams[bigrams$w0 == i & bigrams$w1 == j,3]
h<-bigrams[bigrams$w0 == i & bigrams$w1 == j,3]
h
as.data.frame(h)
ncol(h)
nrow(bigrams[bigrams$w0 == 'abby' & bigrams$w1 == 's',4])
nrow(bigrams[bigrams$w0 == 'abby' & bigrams$w1 == 'sa',4])
bigram.m <- rep(0, length(unique(bigrams$w0)) *  length(unique(bigrams$w1)))
dim(bigram.m) <- c(length(unique(bigrams$w0)), length(unique(bigrams$w1)))
dimnames(bigram.m) <- list(unique(bigrams$w0), unique(bigrams$w1))
for(i in unique(bigrams$w0)){
for(j in unique(bigrams$w1)){
bgp <- bigrams[bigrams$w0 == i & bigrams$w1 == j,4]
if(nrow(bgp) != 0){
bigram.m[[i, j]] <- as.numeric(bgp)
}
}
}
bigram.m <- rep(1, length(unique(bigrams$w0)) *  length(unique(bigrams$w1)))
dim(bigram.m) <- c(length(unique(bigrams$w0)), length(unique(bigrams$w1)))
dimnames(bigram.m) <- list(unique(bigrams$w0), unique(bigrams$w1))
for(i in unique(bigrams$w0)){
for(j in unique(bigrams$w1)){
bgp <- bigrams[bigrams$w0 == i & bigrams$w1 == j,4]
if(nrow(bgp) != 0){
bigram.m[[i, j]] <- 1 - as.numeric(bgp)
}
}
}
bigrams <- bigrams[1:100,]
bigram.m <- rep(0, length(unique(bigrams$w0)) *  length(unique(bigrams$w1)))
dim(bigram.m) <- c(length(unique(bigrams$w0)), length(unique(bigrams$w1)))
dimnames(bigram.m) <- list(unique(bigrams$w0), unique(bigrams$w1))
for(i in unique(bigrams$w0)){
for(j in unique(bigrams$w1)){
bgp <- bigrams[bigrams$w0 == i & bigrams$w1 == j,4]
if(nrow(bgp) != 0){
bigram.m[[i, j]] <- 1 - as.numeric(bgp)
}
}
}
bigram.m
graph.adjacency(bigram.m)
words <- unique(c(unique(bigrams$w0), unique(bigrams$w1)))
bigram.m <- rep(0, length(words)^2)
dim(bigram.m) <- c(length(words), length(words))
dimnames(bigram.m) <- list(words, words)
for(i in words){
for(j in words){
bgp <- bigrams[bigrams$w0 == i & bigrams$w1 == j,4]
if(nrow(bgp) != 0){
bigram.m[[i, j]] <- 1 - as.numeric(bgp)
}
}
}
graph.adjacency(bigram.m)
bigrams <- data.frame(bigram=unlist(sapply(bigram_corp, function(x){
x$content
})))  %>%
mutate(bigram=sapply(as.character(bigram), function(x) substr(x, 4, nchar(x)-2))) %>%
separate(bigram, into=c('w0', 'w1'), sep = "\", \"") %>%
dplyr::group_by(w0, w1) %>%
dplyr::summarise(cnt=n()) %>%
ungroup() %>%
mutate(p = cnt / sum(cnt))
words <- unique(c(unique(bigrams$w0), unique(bigrams$w1)))
words <- words[sample(1:length(words), size = 100)]
bigram.m <- rep(0, length(words)^2)
dim(bigram.m) <- c(length(words), length(words))
dimnames(bigram.m) <- list(words, words)
for(i in words){
for(j in words){
bgp <- bigrams[bigrams$w0 == i & bigrams$w1 == j,4]
if(nrow(bgp) != 0){
bigram.m[[i, j]] <- 1 - as.numeric(bgp)
}
}
}
bigram.m
g1 <- graph.adjacency(bigram.m)
g1
(b1 <- betweenness(g1, directed = FALSE))
plot.igraph(g1)
plot.igraph(g1)
words <- unique(c(unique(bigrams$w0), unique(bigrams$w1)))
words <- words[sample(1:length(words), size = 100)]
bigram.m <- rep(0, length(words)^2)
dim(bigram.m) <- c(length(words), length(words))
dimnames(bigram.m) <- list(words, words)
for(i in words){
for(j in words){
bgp <- bigrams[bigrams$w0 == i & bigrams$w1 == j,4]
if(nrow(bgp) != 0){
bigram.m[[i, j]] <- 1 - as.numeric(bgp)
}
}
}
g1 <- graph.adjacency(bigram.m)
plot.igraph(g1)
words <- unique(c(unique(bigrams$w0), unique(bigrams$w1)))
words <- words[sample(1:length(words), size = 1000)]
bigram.m <- rep(0, length(words)^2)
dim(bigram.m) <- c(length(words), length(words))
dimnames(bigram.m) <- list(words, words)
for(i in words){
for(j in words){
bgp <- bigrams[bigrams$w0 == i & bigrams$w1 == j,4]
if(nrow(bgp) != 0){
bigram.m[[i, j]] <- 1 - as.numeric(bgp)
}
}
}
words <- unique(c(unique(bigrams$w0), unique(bigrams$w1)))
words <- words[sample(1:length(words), size = 200)]
bigram.m <- rep(0, length(words)^2)
dim(bigram.m) <- c(length(words), length(words))
dimnames(bigram.m) <- list(words, words)
for(i in words){
for(j in words){
bgp <- bigrams[bigrams$w0 == i & bigrams$w1 == j,4]
if(nrow(bgp) != 0){
bigram.m[[i, j]] <- 1 - as.numeric(bgp)
}
}
}
bigrams
bigrams[100,]
bigrams[1000,]
bigrams[3000,]
bigrams[9000,]
bigrams[4000,]
summary(bigrams)
# graph
bigrams2 <- bigrams %>%
arrange(desc(p))
bigrams2 <- bigrams2[1:300, ]
words <- unique(c(unique(bigrams2$w0), unique(bigrams2$w1)))
bigram.m <- rep(0, length(words)^2)
dim(bigram.m) <- c(length(words), length(words))
dimnames(bigram.m) <- list(words, words)
for(i in words){
for(j in words){
bgp <- bigrams[bigrams$w0 == i & bigrams$w1 == j,4]
if(nrow(bgp) != 0){
bigram.m[[i, j]] <- 1 - as.numeric(bgp)
}
}
}
g1 <- graph.adjacency(bigram.m)
plot.igraph(g1)
g1
bigram.m
betweenness(g1)
g1 <- graph.adjacency(bigram.m,weighted = T)
betweenness(g1)
plot.igraph(g1)
g1 <- graph.adjacency(bigram.m,weighted = T, directed=F)
betweenness(g1)
plot.igraph(g1)
# graph
bigrams2 <- bigrams %>%
arrange(desc(p))
bigrams2 <- bigrams2[1:100, ]
words <- unique(c(unique(bigrams2$w0), unique(bigrams2$w1)))
bigram.m <- rep(0, length(words)^2)
dim(bigram.m) <- c(length(words), length(words))
dimnames(bigram.m) <- list(words, words)
for(i in words){
for(j in words){
bgp <- bigrams[bigrams$w0 == i & bigrams$w1 == j,4]
if(nrow(bgp) != 0){
bigram.m[[i, j]] <- as.numeric(bgp)
}
}
}
g1 <- graph.adjacency(bigram.m,weighted = T, directed=F)
betweenness(g1)
plot.igraph(g1)
plot.igraph(g1,names=F)
g1
# graph
bigrams2 <- bigrams %>%
arrange(desc(p))
bigrams2 <- bigrams2[1:20, ]
words <- unique(c(unique(bigrams2$w0), unique(bigrams2$w1)))
bigram.m <- rep(0, length(words)^2)
dim(bigram.m) <- c(length(words), length(words))
dimnames(bigram.m) <- list(words, words)
for(i in words){
for(j in words){
bgp <- bigrams[bigrams$w0 == i & bigrams$w1 == j,4]
if(nrow(bgp) != 0){
bigram.m[[i, j]] <- as.numeric(bgp)
}
}
}
g1 <- graph.adjacency(bigram.m,weighted = T, directed=F)
betweenness(g1)
plot.igraph(g1)
# graph
bigrams2 <- bigrams %>%
arrange(desc(p))
bigrams2 <- bigrams2[1:5, ]
words <- unique(c(unique(bigrams2$w0), unique(bigrams2$w1)))
bigram.m <- rep(0, length(words)^2)
dim(bigram.m) <- c(length(words), length(words))
dimnames(bigram.m) <- list(words, words)
for(i in words){
for(j in words){
bgp <- bigrams[bigrams$w0 == i & bigrams$w1 == j,4]
if(nrow(bgp) != 0){
bigram.m[[i, j]] <- as.numeric(bgp)
}
}
}
g1 <- graph.adjacency(bigram.m,weighted = T, directed=F)
betweenness(g1)
plot.igraph(g1)
bigrams2
length(words)
# graph
bigrams2 <- bigrams %>%
arrange(desc(p))
bigrams2 <- bigrams2[1:5, ]
words <- unique(c(unique(bigrams2$w0), unique(bigrams2$w1)))
bigram.m <- rep(0, length(words)^2)
dim(bigram.m) <- c(length(words), length(words))
dimnames(bigram.m) <- list(words, words)
for(i in words){
for(j in words){
bgp <- bigrams[bigrams$w0 == i & bigrams$w1 == j,4]
if(nrow(bgp) != 0){
bigram.m[[i, j]] <- as.numeric(bgp)
}
}
}
g1 <- graph.adjacency(bigram.m,weighted = T, directed=F)
betweenness(g1)
plot.igraph(g1)
g1
plot.igraph(g1, axes=F)
plot.igraph(g1, axes=T)
plot.igraph(g1, mark.groups =NULL)
words <- unique(c(unique(bigrams2$w0), unique(bigrams2$w1)))[1:10]
bigram.m <- rep(0, length(words)^2)
dim(bigram.m) <- c(length(words), length(words))
dimnames(bigram.m) <- list(words, words)
for(i in words){
for(j in words){
bgp <- bigrams[bigrams$w0 == i & bigrams$w1 == j,4]
if(nrow(bgp) != 0){
bigram.m[[i, j]] <- as.numeric(bgp)
}
}
}
g1 <- graph.adjacency(bigram.m,weighted = T, directed=F)
betweenness(g1)
plot.igraph(g1)
words
g1
bigrams2 <- bigrams %>%
arrange(desc(p))
#bigrams2 <- bigrams2[1:5, ]
words <- unique(c(unique(bigrams2$w0), unique(bigrams2$w1)))[1:10]
bigram.m <- rep(0, length(words)^2)
dim(bigram.m) <- c(length(words), length(words))
dimnames(bigram.m) <- list(words, words)
for(i in words){
for(j in words){
bgp <- bigrams[bigrams$w0 == i && bigrams$w1 == j,4]
if(nrow(bgp) != 0){
bigram.m[[i, j]] <- as.numeric(bgp)
}
}
}
g1 <- graph.adjacency(bigram.m,weighted = T, directed=F)
betweenness(g1)
plot.igraph(g1)
+words
words
bigram.m
g1 <- graph.adjacency(bigram.m,weighted = T, directed=F)
bigrams2 <- bigrams %>%
arrange(desc(p))
#bigrams2 <- bigrams2[1:5, ]
words <- unique(c(unique(bigrams2$w0), unique(bigrams2$w1)))[1:10]
bigram.m <- rep(0, length(words)^2)
dim(bigram.m) <- c(length(words), length(words))
dimnames(bigram.m) <- list(words, words)
for(i in words){
for(j in words){
bgp <- bigrams[bigrams$w0 == i && bigrams$w1 == j,4]
if(nrow(bgp) != 0){
bigram.m[[i, j]] <- as.numeric(bgp)
}
}
}
g1 <- graph.adjacency(bigram.m,weighted = T)
betweenness(g1)
plot.igraph(g1)
# graph
bigrams2 <- bigrams %>%
arrange(desc(p))
#bigrams2 <- bigrams2[1:5, ]
words <- unique(c(unique(bigrams2$w0), unique(bigrams2$w1)))
bigram.m <- rep(0, length(words)^2)
dim(bigram.m) <- c(length(words), length(words))
dimnames(bigram.m) <- list(words, words)
for(i in words){
for(j in words){
bgp <- bigrams[bigrams$w0 == i && bigrams$w1 == j,4]
if(nrow(bgp) != 0){
bigram.m[[i, j]] <- as.numeric(bgp)
}
}
}
bigrams2 <- bigrams %>%
arrange(desc(p))
bigrams2 <- bigrams2[1:20, ]
words <- unique(c(unique(bigrams2$w0), unique(bigrams2$w1)))
bigram.m <- rep(0, length(words)^2)
dim(bigram.m) <- c(length(words), length(words))
dimnames(bigram.m) <- list(words, words)
for(i in words){
for(j in words){
bgp <- bigrams[bigrams$w0 == i && bigrams$w1 == j,4]
if(nrow(bgp) != 0){
bigram.m[[i, j]] <- as.numeric(bgp)
}
}
}
g1 <- graph.adjacency(bigram.m,weighted = T)
betweenness(g1)
plot.igraph(g1)
# graph
bigrams2 <- bigrams %>%
arrange(desc(p))
bigrams2 <- bigrams2[1:30, ]
words <- unique(c(unique(bigrams2$w0), unique(bigrams2$w1)))
bigram.m <- rep(0, length(words)^2)
dim(bigram.m) <- c(length(words), length(words))
dimnames(bigram.m) <- list(words, words)
for(i in words){
for(j in words){
bgp <- bigrams[bigrams$w0 == i && bigrams$w1 == j,4]
if(nrow(bgp) != 0){
bigram.m[[i, j]] <- as.numeric(bgp)
}
}
}
g1 <- graph.adjacency(bigram.m,weighted = T)
betweenness(g1)
plot.igraph(g1)
bigrams2 <- bigrams %>%
arrange(desc(p))
bigrams2 <- bigrams2[1:40, ]
words <- unique(c(unique(bigrams2$w0), unique(bigrams2$w1)))
bigram.m <- rep(0, length(words)^2)
dim(bigram.m) <- c(length(words), length(words))
dimnames(bigram.m) <- list(words, words)
for(i in words){
for(j in words){
bgp <- bigrams[bigrams$w0 == i && bigrams$w1 == j,4]
if(nrow(bgp) != 0){
bigram.m[[i, j]] <- as.numeric(bgp)
}
}
}
g1 <- graph.adjacency(bigram.m,weighted = T)
betweenness(g1)
plot.igraph(g1)
bigrams2 <- bigrams %>%
arrange(desc(p))
bigrams2 <- bigrams2[1:40, ]
words <- unique(c(unique(bigrams2$w0), unique(bigrams2$w1)))
bigram.m <- rep(0, length(words)^2)
dim(bigram.m) <- c(length(words), length(words))
dimnames(bigram.m) <- list(words, words)
for(i in words){
for(j in words){
bgp <- bigrams[bigrams$w0 == i & bigrams$w1 == j,4]
if(nrow(bgp) != 0){
bigram.m[[i, j]] <- as.numeric(bgp)
}
}
}
g1 <- graph.adjacency(bigram.m,weighted = T)
betweenness(g1)
plot.igraph(g1)
plot(g1, edge.arrow.size=.4,vertex.label=NA)
install.packages('network')
install.packages('networkD3')
library(networkD3)
bigrams2 <- bigrams2[1:100,]
data(MisLinks)
data(MisNodes)
MisNodes
MisLinks
simpleNetwork(el)
el <- data.frame(from=as.numeric(factor(bigrams2$w0))-1,
to=as.numeric(factor(bigrams2$w1))-1 )
simpleNetwork(el)
simpleNetwork(el,charge = bigrams2$p)
simpleNetwork(el,charge = 1/bigrams2$p)
simpleNetwork(el,linkDistance = bigrams2$p)
simpleNetwork(el, charge = log(bigrams2$p + 1))
forceNetwork(el, charge = log(bigrams2$p + 1))
forceNetwork(el, charge = log(bigrams2$p + 1), nodes=cbind(factor(bigrams2$w0), factor(bigrams2$w1)))
forceNetwork(el, charge = log(bigrams2$p + 1), Nodes=cbind(factor(bigrams2$w0), factor(bigrams2$w1)))
simpleNetwork(bigrams2$w0, bigrams$w1)
simpleNetwork(data.frame(bigrams2$w0, bigrams$w1))
simpleNetwork(data.frame(bigrams2$w0, bigrams2$w1))
simpleNetwork(data.frame(bigrams2$w0, bigrams2$w1), charge = bigrams2$cnt)
simpleNetwork(data.frame(bigrams2$w0, bigrams2$w1), linkDistance = bigrams2$cnt)
simpleNetwork(data.frame(bigrams2$w0, bigrams2$w1), linkDistance = bigrams2$p)
simpleNetwork(data.frame(bigrams2$w0, bigrams2$w1), linkDistance = log(10*bigrams2$p+1))
simpleNetwork(data.frame(bigrams2$w0, bigrams2$w1), linkDistance = 10*(bigrams2$p+1))
simpleNetwork(data.frame(bigrams2$w0, bigrams2$w1), charge = -1)
simpleNetwork(data.frame(bigrams2$w0, bigrams2$w1), charge = -bigrams2$p)
simpleNetwork(data.frame(bigrams2$w0, bigrams2$w1), charge = +bigrams2$p)
simpleNetwork(data.frame(bigrams$w0, bigrams$w1))
bigrams2 <- bigrams %>%
arrange(desc(p))
bigrams2 <- bigrams2[sample(1:nrow(bigrams2), n=300),]
bigrams2 <- bigrams %>%
arrange(desc(p))
bigrams2 <- bigrams2[sample(1:nrow(bigrams2), size = 300),]
simpleNetwork(data.frame(bigrams2$w0, bigrams2$w1))
bigrams2 <- bigrams %>%
arrange(desc(p))
bigrams2 <- bigrams2[sample(1:nrow(bigrams2), size = 1000),]
simpleNetwork(data.frame(bigrams2$w0, bigrams2$w1))
MisLinks
MisNodes
head(MisLinks)
head(MisNodes)
unique(c(MisLinks$source,MisLinks$target))
max(unique(c(MisLinks$source,MisLinks$target)))
nrow(MisNodes)
a <- factor('A','B' , 'C')
a
a <- factor(c('A','B' , 'C'))
a
bigrams2 <- bigrams %>%
arrange(desc(p))
bigrams2 <- bigrams2[sample(1:nrow(bigrams2), size = 300),]
words <- unique(c(unique(bigrams2$w0), unique(bigrams2$w1)))
nodes <- data.frame(id=1:length(words), node=words)
el <- data.frame(w0=words$id[words$node==bigrams2$w0], w1=words$id[words$node==bigrams2$w1])
el <- data.frame(w0=nodes$id[nodes$node==bigrams2$w0], w1=nodes$id[nodes$node==bigrams2$w1])
which(nodes$node==bigrams2$w0)
sapply(bigrams2$w0, function(x) nodes$id[nodes$node==x])
el <- data.frame(w0=sapply(bigrams2$w0, function(x) nodes$id[nodes$node==x]),
w1=sapply(bigrams2$w1, function(x) nodes$id[nodes$node==x]))
el
forceNetwork(el, nodes)
forceNetwork(el, nodes, NodeID = 'node')
nodes <- data.frame(id=1:length(words), node=words, group=rep(1, length(words)))
forceNetwork(el, nodes, NodeID = 'node')
forceNetwork(el, nodes, NodeID = 'node', Group='group')
forceNetwork(el, nodes, Source = 'w0',
Target='w1', NodeID = 'node',
Group='group')
forceNetwork(el, nodes, Source = 'w0',
Target='w1', NodeID = 'node',
Group='group')
forceNetwork(el, nodes, Source = 'w0',
Target='w1', NodeID = 'node',
Group='group', Value='p')
forceNetwork(Links=el, Nodes=nodes, Source = 'w0',
Target='w1', NodeID = 'node',
Group='group', Value='p')
el <- data.frame(w0=sapply(bigrams2$w0, function(x) nodes$id[nodes$node==x]),
w1=sapply(bigrams2$w1, function(x) nodes$id[nodes$node==x]),
p=bigrams2$cnt)
forceNetwork(Links=el, Nodes=nodes, Source = 'w0',
Target='w1', NodeID = 'node',
Group='group', Value='p')
